import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import SelectInput from "~/components/SelectInput";

type DeviceType = {
  label: string;
  value: string;
};

export default function Prejoin() {
  const [audioDevices, setAudioDevices] = useState<DeviceType[]>([]);
  const [outputDevices, setOutputDevices] = useState<DeviceType[]>([]);
  const [videoDevices, setVideoDevices] = useState<DeviceType[]>([]);
  const [audioStream, setAudioStream] = useState<MediaStream | null>(null);
  const [videoStream, setVideoStream] = useState<MediaStream | null>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const videoRef = useRef<HTMLVideoElement | null>(null);

  useEffect(() => {
    async function fetchVideoDevices() {
      try {
        const videoStream = await navigator.mediaDevices.getUserMedia({
          video: true,
        } as MediaStreamConstraints);

        const devices = await navigator.mediaDevices.enumerateDevices();

        const videoDevices = devices
          .filter((device) => device.kind === "videoinput")
          .map((device) => ({
            label: device.label,
            value: device.deviceId,
          }));

        setVideoDevices(videoDevices);
        setVideoStream(videoStream);

        if (videoRef.current) {
          videoRef.current.srcObject = videoStream;
        }
      } catch (error) {
        console.error("Erro ao acessar dispositivos de video:", error);
      }
    }

    async function fetchAudioDevices() {
      try {
        const audioStream = await navigator.mediaDevices.getUserMedia({
          audio: true,
        } as MediaStreamConstraints);

        const devices = await navigator.mediaDevices.enumerateDevices();

        const audioInputDevices = devices
          .filter((device) => device.kind === "audioinput")
          .map((device) => ({
            label: device.label,
            value: device.deviceId,
          }));

        const outputDevices = devices
          .filter((device) => device.kind === "audiooutput")
          .map((device) => ({
            label: device.label,
            value: device.deviceId,
          }));

        setAudioDevices(audioInputDevices);
        setOutputDevices(outputDevices);

        setAudioStream(audioStream);

        if (audioRef.current) {
          audioRef.current.srcObject = audioStream;
        }
      } catch (error) {
        console.error("Erro ao acessar dispositivos de audio:", error);
      }
    }

    fetchAudioDevices().catch((error) => {
      console.error("Erro ao acessar dispositivos de audio:", error);
    });
    fetchVideoDevices().catch((error) => {
      console.error("Erro ao acessar dispositivos de video:", error);
    });

    return () => {
      if (audioStream) {
        audioStream.getTracks().forEach((track) => track.stop());
      }
      if (videoStream) {
        videoStream.getTracks().forEach((track) => track.stop());
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  return (
    <>
      <Head>
        <title>Prejoin</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="flex h-screen flex-col items-center justify-center gap-6">
          <div className="min-w-96 h-96 border-2 border-solid border-black">
            <video
              ref={videoRef}
              autoPlay
              playsInline
              className="h-full w-full"
            />
          </div>
          <div className="flex flex-col gap-6">
            <div className="flex flex-col gap-4">
              <h2>Dispositivos</h2>
              <SelectInput options={audioDevices} />
              <SelectInput options={outputDevices} />
              <SelectInput options={videoDevices} />
            </div>
            {audioStream && (
              <div>
                <h2>Audio</h2>
                <audio ref={audioRef} autoPlay />
              </div>
            )}
            <button className="h-10 w-24 self-center rounded bg-indigo-500 text-white">
              Join
            </button>
          </div>
        </div>
      </main>
    </>
  );
}
