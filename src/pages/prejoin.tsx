import Head from "next/head";
import { useEffect, useRef, useState } from "react";
import SelectInput from "~/components/SelectInput";
import fetchDevice from "~/providers/fetchDevice";

type DeviceType = {
  label: string;
  value: string;
};

export default function Prejoin() {
  const [audioDevices, setAudioDevices] = useState<DeviceType[]>([]);
  const [outputDevices, setOutputDevices] = useState<DeviceType[]>([]);
  const [videoDevices, setVideoDevices] = useState<DeviceType[]>([]);
  const [audioStream, setAudioStream] = useState<MediaStream | null>(null);
  const [videoStream, setVideoStream] = useState<MediaStream | null>(null);
  const audioRef = useRef<HTMLAudioElement | null>(null);
  const videoRef = useRef<HTMLVideoElement | null>(null);
  const [selectedAudioDevice, setSelectedAudioDevice] = useState<string | null>(
    null,
  );

  useEffect(() => {
    const initializeMediaDevices = async () => {
      try {
        const videoDevicesData = await fetchDevice({
          device: "video",
          output: false,
        });
        setVideoDevices(videoDevicesData.deviceInfo);
        setVideoStream(videoDevicesData.deviceStream);
        if (videoRef.current) {
          videoRef.current.srcObject = videoDevicesData.deviceStream;
        }

        const outputDevicesData = await fetchDevice({
          device: "audio",
          output: true,
        });
        setOutputDevices(outputDevicesData.deviceInfo);

        const audioDevicesData = await fetchDevice({
          device: "audio",
          output: false,
        });
        setAudioDevices(audioDevicesData.deviceInfo);
        setAudioStream(audioDevicesData.deviceStream);
        if (audioRef.current) {
          audioRef.current.srcObject = audioDevicesData.deviceStream;
        }

        if (selectedAudioDevice) {
          const selectedAudioTrack = audioDevicesData.deviceStream
            .getAudioTracks()
            .find((track) => track.label === selectedAudioDevice);
          if (selectedAudioTrack) {
            // Crie uma nova stream apenas com o dispositivo de Ã¡udio selecionado
            const audioStream = new MediaStream([selectedAudioTrack]);
            setAudioStream(audioStream);
            if (audioRef.current) {
              audioRef.current.srcObject = audioStream;
            }
          }
        }
      } catch (error) {
        console.error("Erro ao acessar dispositivos:", error);
      }
    };

    initializeMediaDevices().catch(console.error);

    return () => {
      if (audioStream) {
        audioStream.getTracks().forEach((track) => track.stop());
      }
      if (videoStream) {
        videoStream.getTracks().forEach((track) => track.stop());
      }
    };
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, [selectedAudioDevice]);

  const handleAudioDeviceChange = (
    event: React.ChangeEvent<HTMLSelectElement>,
  ) => {
    setSelectedAudioDevice(event.target.value);
    console.log(event.target.value);
  };

  return (
    <>
      <Head>
        <title>Prejoin</title>
        <meta name="description" content="Generated by create-t3-app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main>
        <div className="flex h-screen flex-col items-center justify-center gap-6">
          <div className="min-w-96 h-96 border-2 border-solid border-black">
            <video
              ref={videoRef}
              autoPlay
              playsInline
              className="h-full w-full"
            />
          </div>
          <div className="flex flex-col gap-6">
            <div className="flex flex-col gap-4">
              <h2>Dispositivos</h2>
              <SelectInput
                options={audioDevices}
                onChange={handleAudioDeviceChange}
              />
              <SelectInput options={outputDevices} />
              <SelectInput options={videoDevices} />
            </div>
            {audioStream && (
              <div className="bg-red-600">
                <h2>Audio</h2>
                <audio ref={audioRef} autoPlay controls />
              </div>
            )}
            <button className="h-10 w-24 self-center rounded bg-indigo-500 text-white">
              Join
            </button>
          </div>
        </div>
      </main>
    </>
  );
}
